<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US">
  <id>https://justin025.github.io/rss.xml</id>
  <title>Justin025</title>
  <updated>2025-01-14T21:59:22+05:00</updated>
  <author>
    <name>Justin Donofrio</name>
  </author>
  <link href="https://justin025.github.io/rss.xml" type="application/atom+xml" />
  <link href="https://justin025.github.io" type="text/html" />


  <entry>
    <id>https://justin025.github.io/blog/how-to-cheat-on-proctored-exams.html</id>
    <title type="text">How To Cheat On Proctored Exams</title>
    <link type="text/html" href="https://justin025.github.io/blog/how-to-cheat-on-proctored-exams.html" />
    <published>2025-1-23T18:32:12+05:00</published>
    <updated>2025-1-23T18:32:12+05:00</updated>
    <summary type="text">A guide on how to bypass ProctorU's VM detection to run external software during an exam.</summary>
    <content type="html" xml:base="https://justin025.github.io/blog/how-to-cheat-on-proctored-exams.html">

      <div>
        <header>
          <h1>How To Cheat On Proctored Exams</h1>
          <time datetime="2025-1-23T18:32:12+05:00">23 January 2025</time>

          <p>
            <em>Spyware is not the solution to an unengaging curriculum.</em>
          </p>

        </header>

        <section>
          <div>
            <figure>
              <picture>
                <source type="image/png" srcset="./how-to-cheat-on-proctored-exams-img1.png" />
                <img src="./how-to-cheat-on-proctored-exams-img1.png" width="500" height="375" alt="ProctorU Logo" />
              </picture>
              <figcaption>ProctorU Logo</figcaption>
            </figure>

            <div>
              <p>Since I first had the pleasure of installing ProctorU, I hated <em>everything</em> about it. For the lucky few who have never taken a proctored exam online, the experience is far more anxiety inducing than any exam or test I've completed in person. The proctor will ask for a copy of your ID, a scan of your face, and thereafter they will request to look around your room; although the worst is yet to come. To ensure the student isn't cheating, what is for lack of a better word, a 'rootkit' is installed onto your computer to allow the proctor to modify settings and scan your device for various signs of 'cheating'. If alarm bells are not ringing in your head after that description, they should be.</p>

              <p>From what I'd heard, ProctorU's LogMeInRescue had virtual machine detection and so I was forced to install Windows for my first exam, but not without setting up a network sniffer first. After multiple rescheduled exams, along with countless hours digging through logs, compiling custom builds of QEMU, and procrastinating any studying whatsoever I had finally found a solution to my problem. The macOS version of ProctorU is unable to detect a properly masked virtual machine. After coming to this conclusion I did what any normal student would do... but before getting into the results let me first explain how to set up your own undetectable macOS virtual machine.</p>

              <p>Instead of writing things from scratch this project relies on <a href='https://github.com/kholia/OSX-KVM'>OSX-KVM</a>. The code below clones the repo and its dependencies, and thereafter prepares your setup. Before running the code make sure kvm, qemu, and virt-manager are installed on your device.</p>

              <figure class="highlight">
                <code class="language-bash" data-lang="bash">
                  $ cd ~<br />
                  $ git clone --depth 1 --recursive https://github.com/kholia/OSX-KVM.git<br />
                  $ cd OSX-KVM<br />
                  <br />
                  $ sudo usermod -aG kvm $(whoami)<br />
                  $ sudo usermod -aG libvirt $(whoami)<br />
                  $ sudo usermod -aG input $(whoami)<br />
                  <br />
                  # This script will fetch the Base System DMG from Apple's website and will ask which OS you prefer. I personally recommend Ventura and it will be used for the duration of this tutorial.<br />
                  $ ./fetch-macOS-v2.py<br />
                  <br />
                  $ cd ..<br />
                  $ git clone https://github.com/Lekensteyn/dmg2img.git<br />
                  $ cd dmg2img<br />
                  $ make<br />
                  $ ./dmg2img -i ../OSX-KVM/BaseSystem.dmg ../OSX-KVM/BaseSystem.img<br />
                  <br />
                  $ cd ../OSX-KVM<br />
                  $ qemu-img create -f qcow2 mac_hdd_ng.img 256G<br />
                  <br />
                  # Used to boot without virt-manager<br />
                  # ./OpenCore-Boot.sh<br />
                  <br />
                  # Move the OSX-KVM folder to your preferred location<br />
                  $ PATH=/path/to/OSX-KVM<br />
                  $ sed "s|/home/CHANGEME/OSX-KVM|$PATH|g" macOS-libvirt-Catalina.xml> macOS.xml<br />
                  $ virt-xml-validate macOS.xml<br />
                  $ virsh --connect qemu:///system define macOS.xml
                </code>
              </figure>

              <p>After completing the commands above you should have macOS added to your instance of virt-manager. Boot into 'macOS Base System'. After booting open Disk Utility, erase your attached drive, and ensure the format selected is APFS. Once your done close Disk Utility, click 'Reinstall macOS Ventura', and run through the prompts. The process could take a couple hours to complete. Your <abbr title="Virtual Machine">VM</abbr> may reboot once finished. Once complete boot into 'macOS Installer', run through the setup prompts, and your <abbr title="Virtual Machine">VM</abbr> should be ready.</p>

              <p>After having booted into your <abbr title="Virtual Machine">VM</abbr> for the first time you may notice that your mic, camera, and speakers are not connected by default. If you are trying to emulate an iMac or Mac Mini then you can simply plug in your USB perpetuals and skip to the next part of the setup. If you are trying to run this on a laptop you will need to install VoodooHDA and disable kext signing in csrutil. To do so you can follow the instructions below.</p>

              <figure class="highlight">
                <code class="language-bash" data-lang="bash">
                  # Boot into recovery mode<br />
                  # Press <kbd>Super+Shift+T</kbd> and in the terminal run:<br />
                  $ csrutil enable --without kext<br />
                  <br />
                  # Boot back into macOS, open the terminal, and run the following:<br />
                  $ sudo diskutil mount disk0s1<br />
                  <br />
                  # Now in Finder navigate to EFI/OC/config.plist and disable AppleALC. You can alternatively use <a href='https://mackie100projects.altervista.org/download-opencore-configurator/'>OpenCore Configurator</a> to edit the file using a GUI interface. Finally install VoodooHDA:<br />
                  <br />
                  $ curl -L -O https://sourceforge.net/projects/voodoohda/files/latest/download<br />
                  $ unzip download<br />
                  $ sudo chown -R root:wheel ./VoodooHDA.kext<br />
                  $ sudo kextutil -v ./VoodooHDA.kext<br />
                  <br />
                  # Now add a sound device to virt-manager, in my specific setup ICH9 works fine. You may also need to forward your USB Controller under PCI Host Device for webcams and microphones.
                </code>
              </figure>

              <p>You will now need to apply patches to QEMU to remove its branding, I personally have experience with <a href='https://github.com/zhaodice/qemu-anti-detection'>qemu-anti-detection</a> and highly recommend their work. If you have gotten to this point and don’t know how to patch or compile QEMU, email me and I’ll walk you through the required steps or send you a binary.</p>

              <p>Finally, back in the vm, you will need to install Google Chrome, or Firefox reskinned as Chrome. Test your setup and once you are ready you can begin your exam. Be warned the Guardian Browser does not work without hardware acceleration and will be extremely laggy, the proctor will assume you have an older device and begin the exam in Chrome.</p>

              <h2>Has this setup been tried in production?</h2>

              <p>The answer to the question above is, yes, numerous times. Although I do not condone cheating of any form, a student using a setup like this could very easily have their notes, a browser window, or even a chat app open while in the middle of their test. They could even share the VNC port to a remote computer or screenshare on the host <abbr title="Operating System">OS</abbr> using something like TeamViewer and have another student complete the exam in its entirety. The possibilities, quite literally, are endless.</p>

              <blockquote>
                Anyone can be a teacher, but very few teachers know how to teach.<br />
                —
                <cite class="h-card">Michael Panetta</cite>
              </blockquote>

              <p>The reason I wrote this article in the first place is not to provide a step-by-step instruction manual on how to get a perfect score in all your classes, but instead to point out the absolute lunacy of having students install software on their computers to confirm they are, infact, not cheating. If the above method didn't work I would have setup some sort of <abbr title="Man In The Middle">MITM</abbr> proxy to send back seemingly normal traffic in a standard Windows <abbr title="Virtual Machine">VM</abbr>, and if that did not work I would have found some other manner of bypassing the imposed restrictions. Of the students I've asked, 60% have admitted to cheating during their most recent exam; not using high tech solutions like I've mentioned but in most cases the method employed is as simple as having their phone outside the view of a proctor, using a bluetooth keyboard, or, as a last resort, using a washroom break to search up the answers to a given question. The solution to an epidemic of cheating students is not to install draconian spyware onto a personal device, but instead to make the course material more engaging and personal.</p>

            </div>
          </div>

        </section>
      </div>

    </content>
    <author>
      <name>Justin Donofrio</name>
    </author>
  </entry>


  <entry>
    <id>https://justin025.github.io/blog/cracking-widevine.html</id>
    <title type="text">Cracking Widevine</title>
    <link type="text/html" href="https://justin025.github.io/blog/cracking-widevine.html" />
    <published>2025-01-14T15:13:12+05:00</published>
    <updated>2025-01-14T15:13:12+05:00</updated>

    <summary type="text">An abstract on how DRM works and methods a user could employ to bypass imposed restrictions.</summary>

    <content type="html" xml:base="https://justin025.github.io/blog/cracking-widevine.html">

      <div>
        <header>
          <h1>Cracking Widevine</h1>
          <time datetime="2025-01-14T15:13:12+05:00">15 January 2025</time>

          <p>
            <em>It's not a bug, it's a feature.</em>
          </p>

        </header>

        <section>
          <div>
            <figure>
              <picture>
                <source type="image/webp" srcset="./cracking-widevine-img1.webp" />
                <img src="./cracking-widevine-img1.webp" width="500" height="375" alt="Widevine Logo" />
              </picture>
              <figcaption>Widevine Logo</figcaption>
            </figure>

            <div>

              <p>Around the second week of August, in 2024, I had begun my search for a music downloader that would be able to rip my entire Spotify library without using YouTube. I had stumbled across casualsnek's <a href='https://github.com/casualsnek/onthespot'>onthespot</a> which seemed to be exactly what I was looking for, a slick GUI, the ability to manage your download queue in a clean list, and most importantly, the ability to rip files directly from Spotify's servers. I was thoroughly impressed, downloaded the app, inputted my credentials, and... received an error. After doing a bit of research it turns out Spotify depreciated standard authentication in their eSDK a couple weeks prior and looking at the commit log it seemed the developer had been missing for over a year at this point. I found a quick hack using <a href='https://github.com/dspearson/librespot-auth'>librespot-auth</a> to login and continue using the app but many users began requesting video tutorials and help installing the various required dependencies on their devices. So I forked the project adding the new login scheme, ironing out many bugs in the process, and adding additional music services. This is where my introduction to Widevine, Playready, and Fairplay began.</p>

              <p>For those who don't have any experience in the field, <abbr title='Digital Rights Management'>DRM</abbr> at its core is an <em>obfuscation technique</em> employed by media providers to ensure their content is unable to be downloaded by the user. In a nutshell, the internet as we know it is merely a series of documents and files transferred to ones computer which our browser then interperts and displays to the user. In the case of YouTube or Soundcloud for instance, once you click play your computer will download the media file and begin playing its contents. You can verify this fact, and even download media yourself by pressing <kbd><abbr title="Control">CTRL</abbr>+SHIFT+I</kbd> on the webpage you would like to inspect. Navigate to the 'Network' tab, reload your page, and hit play again. You can watch your browser in real time process the page and you may even see the file url which you can open in a new tab and download.</p>

              <p>DRM in the simplest sense aims to make the process of downloading media more difficult by obfuscating or encrypting the file so that even if the output is downloaded, it is useless to the user. The following link is an example of Get Lucky by Daft Punk in case you would like to see Deezer's inhouse DRM in action, you can download and listen to it <a href='https://files.catbox.moe/3gt8po.mp3'>here</a>. So then how exactly does Widevine work and why is it employed by every major media provider, from Spotify, to Disney, to Netflix?</p>

              <figure>
                <picture>
                  <source type="image/png" srcset="./cracking-widevine-img2.png" />
                  <img src="./cracking-widevine-img1.webp" width="800" height="375" alt="Diagram of the Widevine L1 Decryption Process" />
                </picture>
                <figcaption>Diagram of the Widevine L1 Decryption Process</figcaption>
              </figure>

              <p>Widevine protected content will have a PSSH in the header of the file which your device or browser will pick up on and begin the decryption process. Your device will then fetch your L1-L3 key, depending on the media and your configuration, and send the PSSH along with a challenge to the license server. If the credentials you sent in are correct, the license server will return a response which can be decrypted using your CDM to output the content decryption key and begin playing the video or song of your choosing. This is all a high level overview of quite a complex process. The ladder half of the question posed, why is this process employed by every major media provider, is quite simple. You are paying these organizations for a subscription and once you stop paying you lose access to their catalog. If a user was able to easily download 4k Netflix movies and upload them across the web very few people would remain subscribed. By utilizing centralized license servers and different decryption keys for each file, the entity can verify that only a certain list of whitelisted devices can play their content at its highest available qualities.</p>

              <h2>So how does one go about downloading encrypted content?</h2>

              <p>In my case I mimicked the API calls a normal user would make to decrypt content off Apple Music, Prime Video, and Crunchyroll to get a exact 1:1 copy of the original file. There are a number of other ways a normal user without any coding experience can get copies of <abbr title='Digital Rights Management'>DRM</abbr> protected content on their devices, one of the easiest being a simple screen recorder like <a href="https://obsproject.com/">OBS</a>. For more complex systems you can use a HDMI splitter that strips HDCP and record any content directly from your TV, similar to an old school <abbr title='Digital Video Recorder'>DVR</abbr>.</p>

              <p>The biggest problem with Widevine, and all DRM systems for that matter, is that the content must be decrypted somewhere along the line for user consumption, and the moment it is decrypted a copy can be made. Widevine employs a number of obfuscation techniques such as running the decryption process using a proprietary <abbr title='Content Decryption Module'>CDM</abbr> and running said process inside a <abbr title='Trusted Execution Environment'>TEE</abbr> but all of this can be reverse engineered because for the decryption to occur the user's device must receive the associated keys, and this is its fatal flaw.</p>

              <h2>Is there a solution to better protect copyrighted content?</h2>

              <p>I've spent an unreasonable amount of time trying to come up with various ways to ensure a user cannot create copies of copyrighted material and haven't been able to come up with an acceptable answer to this question. After much consideration I would be inclined to answer no, or at the very least, not with the web standards that are currently in place. Is it possible that Widevine 2.0 may someday be released completely invalidating my arguments? It is possible, but I wouldn't hold my breath.</p>

              <p>To leave the reader with a thought, during the couple months I'd spent working on OnTheSpot I've tried quite a number of music services and interestingly of the eight I'd tried Qobuz seemed to be my favourite. Unrelated to my decision Qobuz also does not encrypt their media using any form of DRM. It is my belief that quite a number of media conglomerants put too much focus on antipiracy measures and too little focus on what matters, that being the user experience. There would be no market for music downloaders if Spotify or Apple Music listened to user's complaints. Sadly many of these companies are now in a position where they redirect the bulk of their attention to profit margins and shareholders instead of user feedback; spending billions of dollars on DRM systems that are inherently flawed.</p>
            </div>
          </div>

        </section>
      </div>

    </content>
    <author>
      <name>Justin Donofrio</name>
    </author>
  </entry>


  <entry>
    <id>https://justin025.github.io/blog/user-groups-docker-and-paranoia.html</id>
    <title type="text">User Groups, Docker, and Paranoia</title>
    <link type="text/html" href="https://justin025.github.io/blog/user-groups-docker-and-paranoia.html" />
    <published>2025-01-03T08:03:04+05:00</published>
    <updated>2025-01-03T08:03:04+05:00</updated>

    <summary type="text">How to forward ports from a QEMU virtual machine run as an unprivileged user.</summary>

    <content type="html" xml:base="https://justin025.github.io/blog/user-groups-docker-and-paranoia.html">

    <div>
      <header>
        <h1>User Groups, Docker, and Paranoia</h1>
        <time datetime="2025-01-03T08:03:04+05:00">3 January 2025</time>
        <p>
          <em>An alternative to hosting services in docker or user groups.</em>
        </p>
      </header>

        <section>

          <div>
            <figure>
              <picture>
                <source type="image/avif" srcset="./user-groups-docker-and-paranoia-img1.avif" />
                <img src="./user-groups-docker-and-paranoia-img1.avif" width="500" height="375" alt="Sandbox" />
              </picture>
              <figcaption>A sandbox with various plastic tools inside it.</figcaption>
            </figure>

            <div>
              <p>I have always felt a bit uncomfortable that Docker has no manner of running without dockerd, a daemon which must be ran as root to manage the networking of any running containers. I have known for quite some time that an unprivileged user in the docker group can utilize dockerd to escalate to a root shell, feel free to try the command below.</p>

              <figure class="highlight">
                <code class="language-bash" data-lang="bash">
                $ docker run -v /:/mnt --rm -it alpine chroot /mnt sh
                </code>
              </figure>

              <p>While researching this problem I'd stumbled upon Podman, a drop in replacement with 1:1 compatibility with all the docker tools I'd used up to that point and also ran in an unprivileged environment. Podman quelled my concerns for a time but not completely. I would often consider potential exploits a compromised container could utilize to scan for vunerable devices on my <abbr title='Local Area Network'>LAN</abbr>, fetch local ssh keys, or even gather intel on the host device itself. It can be argued, and rightfully so, that an intruder would first have to exploit a zero day vunerablility in docker itself or one of the dependencies it relies on but even so I wasn't willing to take the chance on a production machine with access to my home network. My search for a more complete solution began and after quite a bit of careful consideration, I decided to settle with QEMU.</p>

              <h2>But wait, doesn't QEMU also require libvirtd to run as root?</h2>

              <p>A valid mistake, and after having used virt-manager for many years I was under the same impression before coming to the realization that QEMU can be run independently when set to use user networking. Before beginning ensure your user is in the kvm group, although this isn't required its highly recommended for setups where multiple containers will be used. To begin you will have to install QEMU and KVM on your host device, below is an example on gentoo. After having finished the install you will need to attach an iso and ssh into the device to complete the install. Since user networked devices do not have an accessible ip address, at least to my knowledge, I've opted to forward port 22 on the virtual machine to 22222 on localhost using hostfwd=tcp::22222-:22. From there the rest of the install is pretty standard, just ensure your install iso has sshd enabled as an init service. Alternatively you can always use vnc or format your disk image inside virt manager and copy the disk over once you've finished your setup.</p>

              <figure class="highlight">
                <code class="language-bash" data-lang="bash">
                  $ emerge qemu kvm<br />
                  $ usermod -aG kvm USERNAME<br />
                  <br />
                  # The zero below signifies a dynamically allocated disk. Alternatively you can set a fixed limit for instance 20G.<br />
                  $ qemu-img create -f qcow2 image.qcow2 0<br />
                  <br />
                  $ qemu-system-x86_64 -m 2048 -smp 2 \<br />
                  -cdrom distro.iso -boot d \<br />
                  -hda image.qcow2 \<br />
                  -netdev user,id=mynet.0,net=10.0.10.0/24,hostfwd=tcp::22222-:22 \<br />
                  -device rtl8139,netdev=mynet.0 \<br />
                  -enable-kvm<br />
                  <br />
                  $ ssh root@localhost -p 22222<br />
                  <br />
                  # Begin the standard installation procedure for your system...
                </code>
              </figure>

              <p>Once the installation procedure is complete all thats left now is to ssh into your machine and set up your service. Make sure to utilize hostfwd to forward any ports you plan on accessing via the host machine. An alternative approach to forward the ports using ssh.</p>

              <figure class="highlight">
                <code class="language-bash" data-lang="bash">
                # Assuming the service you are trying to access is available at port 8080 on the target machine.<br />
                $ qemu-system-x86_64 -m 2048 -smp 2 \<br />
                -hda image.qcow2 \<br />
                -netdev user,id=mynet.0,net=10.0.10.0/24,hostfwd=tcp::22222-:22,hostfwd=tcp::8080-:8080 \<br />
                -device rtl8139,netdev=mynet.0 \<br />
                -enable-kvm<br />
                <br />
                $ ssh root@localhost -p 22222<br />
                <br />
                # You can now start/configure your service.
                </code>
              </figure>

              <p>Now after putting http://localhost:8080 into your url bar you should see your service or docker container on the host device. You can use the same process to pass ports from your host to the target.</p>

              <h2>Conclusion</h2>

              <p>Is running a docker container inside a virtual machine really any superior to running docker on the host machine itself? The question posed is a difficult one to answer and varies depending on your setup. After having read about malicious containers or a new docker <abbr title='Common Vulnerabilities and Exposures'>CVE</abbr> almost quarterly, I'd decided that running my services inside a sandboxed environment would better contain any potential exploits.</p>
            </div>
          </div>

        </section>
      </div>

    </content>
    <author>
      <name>Justin Donofrio</name>
    </author>
  </entry>


  <entry>
    <id>https://justin025.github.io/blog/welcome.html</id>
    <title type="text">Welcome</title>
    <link type="text/html" href="https://justin025.github.io/blog/welcome.html" />
    <published>2024-12-30T14:32:21+05:00</published>
    <updated>2024-12-30T14:32:21+05:00</updated>

    <summary type="text">A brief introduction to this website and an explaination of its purpose.</summary>

    <content type="html" xml:base="https://justin025.github.io/blog/welcome.html">

      <div>
        <header>
          <h1>Welcome</h1>
          <time datetime="2024-12-30T14:32:21+05:00">30 December 2024</time>
        </header>

        <section>
          <div>

            <div>
              <p>Over the years I have been using a text file to store all of my notes regarding the countless projects I've attempted or completed, and as of late it's become extremely unorganized. The purpose of this website is to properly archive some of the more obscure problems and solutions I've faced so that hopefully I can help others in the process.</p>

              <p>The services tab hosts links to various public and private services I am currently hosting. The reading tab is quite bare at the moment but will at one point serve as an organized list of recommendations. If you would like access any of my publically facing websites, have any requests/recommendations, or just would like to chat feel free to send me an email at the following address, <a href="mailto:justin026@protonmail.com">justin026@protonmail.com</a> | <a href="./assets/email.asc">PGP</a>.</p>
            </div>
          </div>

        </section>
      </div>

    </content>
    <author>
      <name>Justin Donofrio</name>
    </author>
  </entry>


</feed>
